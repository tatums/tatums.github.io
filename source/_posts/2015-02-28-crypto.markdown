---
layout: post
title: "Crypto"
date: 2015-02-28 16:05:01 -0600
comments: true
categories: encryption
---

I've been playing around with Public-key cryptography or asymmetric cryptography. With revaltions from Eric Snowden on programs like PRISM, I feel that encryption is more important than ever.



_From Wikipedia_
<a href="http://en.wikipedia.org/wiki/Public-key_cryptography">
  <blockquote>
  Public-key cryptography is a class of cryptographic algorithms which requires two separate keys, one of which is secret (or private) and one of which is public. Although different, the two parts of this key pair are mathematically linked. The public key is used to encrypt plaintext or to verify a digital signature; whereas the private key is used to decrypt ciphertext or to create a digital signature.
  </blockquote>
</a>




First lets generate a key.  With this key we can generate as many public keys that we like.
```
require "openssl"
key = OpenSSL::PKey::RSA.new(2048)
```

Now lets write the private key to disk.
```ruby
File.open("~/.ssh/private_key", "w+") do |f|
  f.write key.to_pem
end
```

And the public key.
```ruby
File.open("~/.ssh/public_key.pem", "w+") do |f|
  f.write key.public_key.to_pem
end
```

Lets create a message and encrypt it with the private key.
```ruby
[1] pry(main)> data = "Some private data is here."
=> "Some private data is here."
[2] pry(main)> encrypted = key.private_encrypt(data)
=> "\x89\x10m\xE9a\xC5`\xFD\xAC\x9Fd/\xFA\xAB5\xEA;?\x10\x9A\x81\x19\xA4\xD6\xCB\x15\a\xEE\"?j=\xD4\x13\rhPq\xDB\xAC[?\xEFNV?\xEF\x1D'\xBE\xE9\xE6\x00\x1A\x06\x94\xBF\xB2\x90\x98.\xEF\xEC\xB6\xB57\xB8\xDD:\r3\xA1\xDEw\x93s \xD0\xAE\x92\v\xE5\x9A\xAC\xD0iz\xFF\xBE\xA69\x01F\x8B_$\x86|\x16<\f\x96\xE3\xEB\x95q\x98\x90\x99\x95=3Ke[,06Y\x15\xA0\xA00\x90Yp\x91\x81t\xED\x86Z\xCD\xF0\x982\xB0(C\xA9\xEE\xB1\xF8\xEA\x8D\xF5;\x1D\a\x90) \xA72\xB0d\xCC\x89\xEC\xA9\xA9\xF4=I\xBER\xE1\x821\xBCi@\xC7O\x03W^\xDAq\xC1x\xCB;9\x1E\xCFw\x9A\xB9O\xDD\xF3\xDB\x8D\bi\xC8\xED\xC2\x8F\xC2Wt\xDC\xAFQ2\xAD\xF0\x9C\xC7NI\xA7\x81J\x8B\xD0\xCF%\xFD\xF7j\xC3\xF1\xA0\x9E\xC9\xD9sZ\xDD\x05\xEA\x11\xB8\xAC0d\xFFo\xEE\x90d9\xBF-\xB7\xD9\\\xAB\x82 6\x0E\x8C"
```
This will result in some encrypted binary data.

Now we can unencrypt the message with the public key.

```ruby
pub = key.public_key

[3] pry(main)> decrypted = pub.public_decrypt(encrypted)
=> "Some private data is here."

```
Nice!

Ok, lets do it again. But this time... convert the binary data to a string, so it can be passed around the net.

```ruby
[4] pry(main)> require "base64"
=> true
[5] pry(main)> enc_string = Base64.encode64(encrypted)
=> "iRBt6WHFYP2sn2Qv+qs16js/EJqBGaTWyxUH7iI/aj3UEw1oUHHbrFs/705W\nP+8dJ77p5gAaBpS/spCYLu/strU3uN06DTOh3neTcyDQrpIL5Zqs0Gl6/76m\nOQFGi18khnwWPAyW4+uVcZiQmZU9M0tlWywwNlkVoKAwkFlwkYF07YZazfCY\nMrAoQ6nusfjqjfU7HQeQKSCnMrBkzInsqan0PUm+UuGCMbxpQMdPA1de2nHB\neMs7OR7Pd5q5T93z240Iacjtwo/CV3Tcr1EyrfCcx05Jp4FKi9DPJf33asPx\noJ7J2XNa3QXqEbisMGT/b+6QZDm/LbfZXKuCIDYOjA==\n"
[6] pry(main)> dec_string = Base64.decode64(enc_string)
=> "\x89\x10m\xE9a\xC5`\xFD\xAC\x9Fd/\xFA\xAB5\xEA;?\x10\x9A\x81\x19\xA4\xD6\xCB\x15\a\xEE\"?j=\xD4\x13\rhPq\xDB\xAC[?\xEFNV?\xEF\x1D'\xBE\xE9\xE6\x00\x1A\x06\x94\xBF\xB2\x90\x98.\xEF\xEC\xB6\xB57\xB8\xDD:\r3\xA1\xDEw\x93s \xD0\xAE\x92\v\xE5\x9A\xAC\xD0iz\xFF\xBE\xA69\x01F\x8B_$\x86|\x16<\f\x96\xE3\xEB\x95q\x98\x90\x99\x95=3Ke[,06Y\x15\xA0\xA00\x90Yp\x91\x81t\xED\x86Z\xCD\xF0\x982\xB0(C\xA9\xEE\xB1\xF8\xEA\x8D\xF5;\x1D\a\x90) \xA72\xB0d\xCC\x89\xEC\xA9\xA9\xF4=I\xBER\xE1\x821\xBCi@\xC7O\x03W^\xDAq\xC1x\xCB;9\x1E\xCFw\x9A\xB9O\xDD\xF3\xDB\x8D\bi\xC8\xED\xC2\x8F\xC2Wt\xDC\xAFQ2\xAD\xF0\x9C\xC7NI\xA7\x81J\x8B\xD0\xCF%\xFD\xF7j\xC3\xF1\xA0\x9E\xC9\xD9sZ\xDD\x05\xEA\x11\xB8\xAC0d\xFFo\xEE\x90d9\xBF-\xB7\xD9\\\xAB\x82 6\x0E\x8C"
[7] pry(main)> pub.public_decrypt(dec_string)
=> "Some private data is here."
```

Very cool. Signing the message with the private key will allow many others to use the public key to verfiy the message came from the sender.

We can also use this inversely.  We can use a public key to encrypt a message that only the private key can unencrypt.

```ruby
[8] pry(main)> enc = pub.public_encrypt("I got ur message. Did u get mine?")
=> "\aYx\xB53\xBA\xD9\xD5\xB2\xB2\xA4#5\e4\xE7\xC6\x86rG8\x91\xDDTC6C\xF5\xD2lC\xB1\xAE4\xF0 \xEFa\xAC\xBB\x97#\xF7I\xE1\x90E\xAF&]\x9E\xE8p.*A\xBDn\xE4\x15\t6i\x9Emm\xAE\xA0\xB2\xC8\xBB4\xB5E\xCA\xAA%\xA5mUv\va\x81\xF0Q\x93\xB0\x17\xA5q\x93\xFD>w\xD8\xB3\xADd\x85\x0E\x85\x96\xB2\xCC0\a\xD1\xDD[\xFE\v\x1F\xAC\xC8.\xBE)\xB6b\x9AZ%\xDF-\xD9\rt\xC796\xF3\x9Du\x7F\xE4/\x97\xB5\xDAw\xA1\xA9y\xE7\xE3\xCA\xABT\xE6g\xC9/\xB4\xA9\xAC\x04\xEF\x9CA<\x17\x8A#\x85\x16\xAA\xFC\x84\xB5\xE4a\xF8\x1C\x1F\xBF\xA8\xF2\x12\x01j\x80\xEA\x171\x96'Z\x9D\xB5\xA0\xBD\xF2\x8E\xDE\x96\xE4\x1A\xC0\xAC\xDC\xC6(\xBF\t\xA0+R\xEE\x03\x87X[\xD3\xD8^\xFDM5\xA3\x16n+\x83\xC3\x8C#\x97\xDD\x86\x82z[\xCD\xA2\x1D\x86\xCB\xDB\xEA\xD9TD\xC4\xA2\xB4g8\x96eO\xBE\xE6\xFC\x8C\xAB"
[9] pry(main)> key.private_decrypt(enc)
=> "I got ur message. Did u get mine?"

[10] pry(main)> pub.public_decrypt(enc)
OpenSSL::PKey::RSAError: padding check failed
from (pry):41:in `public_decrypt'
```


