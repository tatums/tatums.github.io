<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Helping me remember...]]></title>
  <link href="http://www.tatum.im/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://www.tatum.im/"/>
  <updated>2015-08-22T10:29:53-05:00</updated>
  <id>http://www.tatum.im/</id>
  <author>
    <name><![CDATA[Tatum Szymczak]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ActiveModel::Model]]></title>
    <link href="http://www.tatum.im/blog/2015/08/13/activemodel-model/"/>
    <updated>2015-08-13T19:37:30-05:00</updated>
    <id>http://www.tatum.im/blog/2015/08/13/activemodel-model</id>
    <content type="html"><![CDATA[<p>Rails 4 brought us <code>ActiveModel::Model</code>. It provides a light weight interface that&rsquo;s similar to an <code>ActiveRecord::Base</code> model.</p>

<p>for example, I can create a Person class like so.</p>

<pre><code class="ruby">class Person
  include ActiveModel::Model
  attr_accessor :name, :age

  validates :name, true

  def save
    ## Do cool stuff here...
  end
end
</code></pre>

<pre><code class="ruby">Loading development environment (Rails 4.2.1)
irb(main):001:0&gt; p = Person.new age: 21
=&gt; #&lt;Person:0x007fc6367193b0 @age=21&gt;
irb(main):002:0&gt; p.valid?
=&gt; false
irb(main):003:0&gt; p.errors
=&gt; #&lt;ActiveModel::Errors:0x007fc638000a68 @base=#&lt;Person:0x007fc6367193b0 @age=21, @validation_context=nil, @errors=#&lt;ActiveModel::Errors:0x007fc638000a68 ...&gt;&gt;, @messages={:name=&gt;["can't be blank"]}&gt;
irb(main):004:0&gt;
</code></pre>

<hr> </hr>


<p>This is great for instances where you don&rsquo;t need a full database backed Active Record model. I&rsquo;ve used them for form objects and in controllers where I have complex logic.</p>

<p>You can think of these as higher level abstractions above your ActiveRecord classes. Also, be conscious of the dependancy direction. An ActiveModel model can depend on an ActiveRecord model but your ActiveRecord models shouldn&rsquo;t depend on an ActiveModel model.</p>

<p><br />
Here&rsquo;s a more involved example.
Lets say I have 2 ActiveRecord classes <code>Org</code> and <code>User</code></p>

<pre><code class="ruby">class Org &lt; ActiveRecord::Base
  validates :name, presence: true
end
</code></pre>

<pre><code class="ruby">class User &lt; ActiveRecord::Base
  validates :first, :last, presence: true
end
</code></pre>

<p>Now I&rsquo;ll create an ActiveModel model (non database)</p>

<p>Notice the validates_each method&hellip; Its going to check each of the ActiveRecord objects and let them raise up any errors to the Signup class.</p>

<pre><code class="ruby">class Signup
  include ActiveModel::Model
  attr_accessor :first, :last, :name

  validates_each :user, :org do |record, attr, value|
    unless value.valid?
      value.errors.each { |k,v| record.errors.add(k.to_sym, v) }
    end
  end

  ## must return boolean
  def save
    if valid?
      org.save &amp;&amp; user.save
    else
      false
    end
  end

  private

    def org
      @org ||= Org.new(name: name)
    end

    def user
      @user ||= User.new(first: first, last: last)
    end
end
</code></pre>

<p>Awesome right!!</p>

<p>So why do all this?  Well, the single responsibilty states that every class should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by the class.  ActiveRecord is responsible for persistence to the database. This will keep our classes with a narrow focus and allow us to refactor and create more use cases in the future. I think it&rsquo;s a win.  I find this strategy is generally good for one directional workflows such as signup or in a shopping app cart checkout.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Configuration]]></title>
    <link href="http://www.tatum.im/blog/2015/03/14/rails-configuration/"/>
    <updated>2015-03-14T10:25:26-05:00</updated>
    <id>http://www.tatum.im/blog/2015/03/14/rails-configuration</id>
    <content type="html"><![CDATA[<p>Occasionally I&rsquo;ll see things like this in a code base.
<code>ruby
def api_host
  if Rails.production?
    "http://prod.fake.api.url"
  else
    "http://stag.fake.api.url"
  end
end
</code></p>

<p>I try to avoid writting methods like this.  Rails provides a nice way to set environment specific variables.</p>

<p><a href="http://guides.rubyonrails.org/configuring.html#custom-configuration">http://guides.rubyonrails.org/configuring.html#custom-configuration</a></p>

<p><code>config/environments/staging.rb</code>
<code>ruby
config.api_host = "http://stag.fake.api.url"
</code></p>

<p><code>config/environments/production.rb</code>
<code>ruby
config.api_host = "http://prod.fake.api.url"
</code></p>

<p>So now you can refactor the method to this.</p>

<pre><code class="ruby">def api_host
  Rails.configuration.api_host
end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Standard Rails Create Action]]></title>
    <link href="http://www.tatum.im/blog/2015/02/11/rails-create-and-update/"/>
    <updated>2015-02-11T15:43:24-06:00</updated>
    <id>http://www.tatum.im/blog/2015/02/11/rails-create-and-update</id>
    <content type="html"><![CDATA[<p>Rails has taught me some really good best practices. Let&rsquo;s look at a default rails create action</p>

<pre><code class="ruby">def create
  @post = Post.new(post_params)
  respond_to do |format|
    if @post.save
      format.html { redirect_to @post, notice: 'Post was successfully created.' }
    else
      format.html { render :new }
    end
  end
end
</code></pre>

<p>I try not to deviate too much from this and nor should you. If <code>@post.save</code> returns true. return a 201 status code.  If <code>@post.save</code> returns false re-render the :new action.  So you can let the user fix the form.</p>

<p>Often I will see things like this.</p>

<pre><code class="ruby">def create
  if params[:something]
    @post = Post.create(post_params)
  else
    @post = Post.create(other_params)
  end
  redirect_to posts_path
end
</code></pre>

<p>At first glance this looks clean. But if you look closer. There is a subtle problem here. If the post object fails validation and fails to create, The action redirects to the index action where all new instaces are creating.  The @post object has lost any knowlege of the params and it will not get to oportunity to display the errors from the object.  You&rsquo;ll have to resort to things like <code>flash[:notice] = "@post.errors.full_messages.join()"</code>&hellip; ugh.</p>

<p>Active record gives us a nice interface for displaying errors on an object.</p>

<pre><code class="ruby">class Post &lt; ActiveRecord::Base
  validates :title, presence: true
end
</code></pre>

<pre><code class="ruby">irb(main):001:0&gt; p = Post.new
=&gt; #&lt;Post id: nil, title: nil, body: nil, created_at: nil, updated_at: nil&gt;
irb(main):002:0&gt; p.valid?
=&gt; false
irb(main):003:0&gt; p.errors
=&gt; #&lt;ActiveModel::Errors:0x007fe0ca9e4b68 @base=#&lt;Post id: nil, title: nil, body: nil, created_at: nil, updated_at: nil&gt;,
@messages={:title=&gt;["can't be blank"]}&gt;
irb(main):004:0&gt;
</code></pre>

<p>When you call <code>@post.save</code> OR <code>@post.valid?</code> errors are added to the @post object so they can be displayed within the form.</p>

<p>Digging even deeper&hellip; Check out <a href="http://api.rubyonrails.org/classes/ActiveModel/Model.html">ActiveModel::Model</a>. It will give you this same object interface without needing database backed model.  Powerful stuff.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrate a Single Database Migration]]></title>
    <link href="http://www.tatum.im/blog/2013/01/21/migrate-a-single-database-migration/"/>
    <updated>2013-01-21T08:43:00-06:00</updated>
    <id>http://www.tatum.im/blog/2013/01/21/migrate-a-single-database-migration</id>
    <content type="html"><![CDATA[<pre><code class="ruby">rails console
require "db/migrate/20121130134444_add_column_backorder_to_orders.rb"
AddColumnBackorderToOrders.up
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Form Helper From Console]]></title>
    <link href="http://www.tatum.im/blog/2013/01/14/form-helper-from-console/"/>
    <updated>2013-01-14T09:00:54-06:00</updated>
    <id>http://www.tatum.im/blog/2013/01/14/form-helper-from-console</id>
    <content type="html"><![CDATA[<p>From the rails console.</p>

<pre><code class="ruby">helper.text_field :object, :name

"&lt;input id=\"object_name\" name=\"object[name]\" size=\"30\" type=\"text\" /&gt;"
</code></pre>
]]></content>
  </entry>
  
</feed>
