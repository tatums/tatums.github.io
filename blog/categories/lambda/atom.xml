<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Lambda | Helping me remember...]]></title>
  <link href="https://www.tatum.im/blog/categories/lambda/atom.xml" rel="self"/>
  <link href="https://www.tatum.im/"/>
  <updated>2017-08-26T09:48:39-05:00</updated>
  <id>https://www.tatum.im/</id>
  <author>
    <name><![CDATA[Tatum Szymczak]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cloudformation ApiGateway and Lambda]]></title>
    <link href="https://www.tatum.im/blog/2016/08/25/cloudformation-apigateway-and-lambda/"/>
    <updated>2016-08-25T07:44:12-05:00</updated>
    <id>https://www.tatum.im/blog/2016/08/25/cloudformation-apigateway-and-lambda</id>
    <content type="html"><![CDATA[<p>Recently, I&rsquo;ve been excited by <a href="http://martinfowler.com/articles/serverless.html">serverless</a>
technology. I began using the <a href="http://serverless.com/">serverless framework</a>
for code boilerplate and deployment. After some time using the framework, I began feeling pain.
Serverless is an excellent project, but it&rsquo;s moving <strong>very</strong> fast. For example, The
framework uses cloudformation for resource dependencies such as dynamoDb, ApiGateway, roles and permissions (to name a few).
Cloudformation is <strong>also</strong> moving very fast. Support for <a href="https://aws.amazon.com/about-aws/whats-new/2016/04/aws-cloudformation-adds-support-for-amazon-api-gateway-and-updated-resource-support/">ApiGateway was added to cloudformation on April
18th, 2016</a>.
 As new features are added to cloudformation, you&rsquo;ll be stuck waiting for
serverless to implement features for feature parity. I&rsquo;ve started using
cloudformation direclty and relying on bash scripts for deployment. I&rsquo;m quite
happy with the results.</p>

<h3>Cloudformation stack</h3>

<p>Once we have a
<a href="https://github.com/tatums/cloudformation-apigateway-lambda/blob/master/cloudformation.json">cloudformation template</a>,
the AWS cli provides us with everthing we need. Using the AWS CLI we can create the stack like so.</p>

<pre><code class="bash">$ aws cloudformation create-stack \
    --stack-name hello-world \
    --template-body file://./cloudformation.json \
    --capabilities CAPABILITY_IAM &amp;&amp; \
    aws cloudformation wait stack-create-complete \
        --stack-name hello-world
</code></pre>

<p>The first command fires off an async create request to AWS.
The second command tells our shell to wait for stack creation to complete.</p>

<p>After that&rsquo;s complete, we&rsquo;ll have created a few resources in AWS. =)  Next, we&rsquo;ll need a way to deploy.</p>

<h3>Deployment</h3>

<p>We have a few tasks for a complete deployment. We should seperate out the
lambda depoyment and the ApiGateway deployment, but in this case I did not.</p>

<ul>
<li>Update Lambda Code - Install any dependencies, zip our code, and upload it.</li>
<li>Publish a Version - From the latest version, It will tag a copy.</li>
<li>Update the alias - Our lambda is pointed to an alias. This will point the lambda to our new version.</li>
<li>deploy ApiGateway - Any changes we make to ApiGateway requires a deploy.</li>
</ul>


<p>The script takes two args. The <code>api-gateway-id</code> and the <code>function-name</code>.</p>

<pre><code class="bash">$ ./deploy.sh abc123 hello-word
</code></pre>

<pre><code class="bash">#!/bin/bash

apiId=$1
functionName=$2
profile=personal

YELLOW='\033[0;33m'
WHITE='\033[0m' # No Color

function zipLambda {
  say "Zipping files." &amp;&amp; \
  rm -rf target &amp;&amp; \
  mkdir -p target &amp;&amp; \
  cp -r *.js package.json target/ &amp;&amp; \
  pushd target &amp;&amp; \
  npm install --production &amp;&amp; \
  zip -r "${functionName}.zip" . &amp;&amp; \
  popd
}

function say {
  printf "\n${YELLOW} $@ ${WHITE}\n"
}

function updateLambdaCode {
  say "Uploading new lambda code." &amp;&amp; \
  aws lambda update-function-code --function-name $functionName --zip-file "fileb://target/${functionName}.zip" --profile $profile
}

function publishVersion {
  say "Publishing a new version." &amp;&amp; \
  aws lambda publish-version --function-name $functionName --profile $profile
}

function updateAlias {
  version=$(aws lambda list-versions-by-function --function-name $functionName --profile personal | grep Version | tail -n 1 | cut -d '"' -f 4) &amp;&amp; \
  say "Updating the alias to version ${version}." &amp;&amp; \
  aws lambda update-alias --function-name $functionName --function-version $version --name prod --profile $profile
}
function deployApiGatway {
  say "Deploying to Api Gateway." &amp;&amp; \
  aws apigateway create-deployment --rest-api-id $apiId --stage-name v1 --profile $profile
}
printf "\nðŸš€ðŸš€ðŸš€ SHIP IT!!! ðŸš€ðŸš€ðŸš€ \n\n"
zipLambda &amp;&amp; \
  updateLambdaCode &amp;&amp; \
  publishVersion &amp;&amp; \
  updateAlias &amp;&amp; \
  deployApiGatway
</code></pre>
]]></content>
  </entry>
  
</feed>
